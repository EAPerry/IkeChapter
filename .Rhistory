mod1 <- lm(log(density) ~ treatment*tpost_D +
as.factor(year) + as.factor(FIPS),
data = my_df)
mod2 <- lm(log(concentration) ~ treatment*tpost_D +
as.factor(year) + as.factor(FIPS),
data = my_df)
mod3 <- lm(log(wealth) ~ treatment*tpost_D +
as.factor(year) + as.factor(FIPS),
data = my_df)
mod4 <- lm(log(distribution) ~ treatment*tpost_D +
as.factor(year) + as.factor(FIPS),
data = my_df)
mod5 <- lm(log(output) ~ treatment*tpost_D +
as.factor(year) + as.factor(FIPS),
data = my_df)
mod6 <- lm(log(use) ~ treatment*tpost_D +
as.factor(year) + as.factor(FIPS),
data = my_df)
mod7 <- lm(log(dependence) ~ treatment*tpost_D +
as.factor(year) + as.factor(FIPS),
data = my_df)
my_models = list(moda, modb, mod1, mod2, mod3, mod4, mod5, mod6, mod7)
my_SE <- lapply(my_models, do_the_SE)
# Main Coefficient Reporting dataframe
model_num <- rep(label, 9)
outcome <- c(
"Contributions",
"Contributions per capita",
"Density",
"Concentration",
"Wealth",
"Distribution",
"Output",
"Use",
"Dependence"
)
main_coefs <- c(
moda$coefficients["treatment:tpost_D"],
modb$coefficients["treatment:tpost_D"],
mod1$coefficients["treatment:tpost_D"],
mod2$coefficients["treatment:tpost_D"],
mod3$coefficients["treatment:tpost_D"],
mod4$coefficients["treatment:tpost_D"],
mod5$coefficients["treatment:tpost_D"],
mod6$coefficients["treatment:tpost_D"],
mod7$coefficients["treatment:tpost_D"]
)
term_names <- data.frame(summary(moda)$aliased)
term_names <- rownames(term_names)
main_se <- lapply(my_SE, function (x) data.frame(term_names, x))
main_se <- bind_rows(main_se)
main_se <- main_se %>%
filter(term_names == "treatment:tpost_D")
main_se <- main_se$x
out_df <- data.frame(model_num, outcome, main_coefs, main_se)
colnames(out_df) <- c("model","outcome","coefs","se")
return(out_df)
}
tab_est <- list()
tab_est[[1]] = did_est(df_storm %>% filter(year <= 2009), "2001—2009")
tab_est[[2]] = did_est(df_storm %>% filter(year <= 2011), "2001—2011")
tab_est[[3]] = did_est(df_storm %>% filter(year <= 2013), "2001—2013")
tab_est <- bind_rows(tab_est)
View(tab_est)
View(tab_est)
df <- tab_est %>%
pivot_longer(cols = 3:4, names_to = "stat", values_to = "my_est")
View(df)
df <- df %>%
pivot_wider(names_from = "model", values_from = "my_est")
View(df)
df <- data.frame(lapply(df, function(x) if(is.numeric(x)) round(x, 3) else x))
View(df)
colnames(df) <- c("Outcome", "Stat", "2001—2009", "2001—2011", "2001—2013")
df <- df %>%
mutate(
`2001—2009` = ifelse(
stat == "se", paste("(", `2001—2009`, ")", sep=""), as.character(`2001—2009`)
),
`2001—2011` = ifelse(
stat == "se", paste("(", `2001—2011`, ")", sep=""), as.character(`2001—2011`)
),
`2001—2013` = ifelse(
stat == "se", paste("(", `2001—2013`, ")", sep=""), as.character(`2001—2013`)
)
)
(22700-20000)/20000
df <- df %>%
mutate(
`2001—2009` = ifelse(
`stat` == "se", paste("(", `2001—2009`, ")", sep=""), as.character(`2001—2009`)
),
`2001—2011` = ifelse(
`stat` == "se", paste("(", `2001—2011`, ")", sep=""), as.character(`2001—2011`)
),
`2001—2013` = ifelse(
`stat` == "se", paste("(", `2001—2013`, ")", sep=""), as.character(`2001—2013`)
)
)
df <- df %>%
mutate(
`2001—2009` = ifelse(
`Stat` == "se", paste("(", `2001—2009`, ")", sep=""), as.character(`2001—2009`)
),
`2001—2011` = ifelse(
`Stat` == "se", paste("(", `2001—2011`, ")", sep=""), as.character(`2001—2011`)
),
`2001—2013` = ifelse(
`Stat` == "se", paste("(", `2001—2013`, ")", sep=""), as.character(`2001—2013`)
)
)
View(df)
df <- tab_est %>%
pivot_longer(cols = 3:4, names_to = "stat", values_to = "my_est")
df <- df %>%
pivot_wider(names_from = "model", values_from = "my_est")
df <- data.frame(lapply(df, function(x) if(is.numeric(x)) round(x, 3) else x))
colnames(df) <- c("Outcome", "Stat", "2001—2009", "2001—2011", "2001—2013")
df <- df %>%
mutate(
`2001—2009` = ifelse(
`Stat` == "se", paste("(", `2001—2009`, ")", sep=""), as.character(`2001—2009`)
),
`2001—2011` = ifelse(
`Stat` == "se", paste("(", `2001—2011`, ")", sep=""), as.character(`2001—2011`)
),
`2001—2013` = ifelse(
`Stat` == "se", paste("(", `2001—2013`, ")", sep=""), as.character(`2001—2013`)
),
Outcome = ifelse(
`Stat` == "se", "", Outcome
)
)
View(df)
df <- tab_est %>%
pivot_longer(cols = 3:4, names_to = "stat", values_to = "my_est")
View(df)
View(tab_est)
df <- tab_est %>%
mutate(
sig = case_when(
coefs/se > 1.645 & coefs/se < 1.96 ~ "*",
coefs/se > 1.96 & coefs/se < 2.326 ~ "**",
coefs/se > 2.326 ~ "***",
T ~ ""
)
)
df <- df %>%
pivot_longer(cols = 3:4, names_to = "stat", values_to = "my_est")
View(df)
df <- df %>%
pivot_wider(names_from = "model", values_from = "my_est")
View(df)
df <- tab_est %>%
mutate(
sig = case_when(
coefs/se > 1.645 & coefs/se < 1.96 ~ "*",
coefs/se > 1.96 & coefs/se < 2.326 ~ "**",
coefs/se > 2.326 ~ "***",
T ~ ""
)
)
df <- df %>%
pivot_longer(cols = 3:4, names_to = "stat", values_to = "my_est")
View(df)
df <- tab_est %>%
mutate(
sig = case_when(
coefs/se > 1.645 & coefs/se < 1.96 ~ "*",
coefs/se > 1.96 & coefs/se < 2.326 ~ "**",
coefs/se > 2.326 ~ "***",
T ~ ""
)
)
df <- df %>%
pivot_longer(cols = 3:4, names_to = "stat", values_to = "my_est") %>%
mutate(
sig = ifelse(stat == "se", "", sig),
my_est = paste(round(my_est, 3), sig, sep="")
)
View(df)
df <- df %>%
pivot_wider(names_from = "model", values_from = "my_est")
View(df)
df <- tab_est %>%
mutate(
sig = case_when(
coefs/se > 1.645 & coefs/se < 1.96 ~ "*",
coefs/se > 1.96 & coefs/se < 2.326 ~ "**",
coefs/se > 2.326 ~ "***",
T ~ ""
)
)
df <- df %>%
pivot_longer(cols = 3:4, names_to = "stat", values_to = "my_est") %>%
mutate(
sig = ifelse(stat == "se", "", sig),
my_est = paste(round(my_est, 3), sig, sep="")
) %>%
select(-c(sig))
df <- df %>%
pivot_wider(names_from = "model", values_from = "my_est")
View(df)
colnames(df) <- c("Outcome", "Stat", "2001—2009", "2001—2011", "2001—2013")
df <- df %>%
mutate(
`2001—2009` = ifelse(
`Stat` == "se", paste("(", `2001—2009`, ")", sep=""), as.character(`2001—2009`)
),
`2001—2011` = ifelse(
`Stat` == "se", paste("(", `2001—2011`, ")", sep=""), as.character(`2001—2011`)
),
`2001—2013` = ifelse(
`Stat` == "se", paste("(", `2001—2013`, ")", sep=""), as.character(`2001—2013`)
),
Outcome = ifelse(
`Stat` == "se", "", Outcome
)
)
df <- tab_est %>%
mutate(
sig = case_when(
coefs/se > 1.645 & coefs/se < 1.96 ~ "*",
coefs/se > 1.96 & coefs/se < 2.326 ~ "**",
coefs/se > 2.326 ~ "***",
T ~ ""
)
)
df <- df %>%
pivot_longer(cols = 3:4, names_to = "stat", values_to = "my_est") %>%
mutate(
sig = ifelse(stat == "se", "", sig),
my_est = paste(round(my_est, 3), sig, sep="")
) %>%
select(-c(sig))
df <- df %>%
pivot_wider(names_from = "model", values_from = "my_est")
colnames(df) <- c("Outcome", "Stat", "2001—2009", "2001—2011", "2001—2013")
df <- df %>%
mutate(
`2001—2009` = ifelse(
`Stat` == "se", paste("(", `2001—2009`, ")", sep=""), as.character(`2001—2009`)
),
`2001—2011` = ifelse(
`Stat` == "se", paste("(", `2001—2011`, ")", sep=""), as.character(`2001—2011`)
),
`2001—2013` = ifelse(
`Stat` == "se", paste("(", `2001—2013`, ")", sep=""), as.character(`2001—2013`)
),
Outcome = ifelse(
`Stat` == "se", "", Outcome
)
) %>%
select(-c(stat))
df <- df %>%
mutate(
`2001—2009` = ifelse(
`Stat` == "se", paste("(", `2001—2009`, ")", sep=""), as.character(`2001—2009`)
),
`2001—2011` = ifelse(
`Stat` == "se", paste("(", `2001—2011`, ")", sep=""), as.character(`2001—2011`)
),
`2001—2013` = ifelse(
`Stat` == "se", paste("(", `2001—2013`, ")", sep=""), as.character(`2001—2013`)
),
Outcome = ifelse(
`Stat` == "se", "", Outcome
)
) %>%
select(-c(Stat))
View(df)
tab_est <- tab_est %>%
mutate(
sig = case_when(
coefs/se > 1.645 & coefs/se < 1.96 ~ "*",
coefs/se > 1.96 & coefs/se < 2.326 ~ "**",
coefs/se > 2.326 ~ "***",
T ~ ""
)
)
tab_est <- tab_est %>%
pivot_longer(cols = 3:4, names_to = "stat", values_to = "my_est") %>%
mutate(
sig = ifelse(stat == "se", "", sig),
my_est = paste(round(my_est, 3), sig, sep="")
) %>%
select(-c(sig))
tab_est <- tab_est %>%
pivot_wider(names_from = "model", values_from = "my_est")
colnames(tab_est) <- c("Outcome", "Stat", "2001—2009", "2001—2011", "2001—2013")
tab_est <- tab_est %>%
mutate(
`2001—2009` = ifelse(
`Stat` == "se", paste("(", `2001—2009`, ")", sep=""), as.character(`2001—2009`)
),
`2001—2011` = ifelse(
`Stat` == "se", paste("(", `2001—2011`, ")", sep=""), as.character(`2001—2011`)
),
`2001—2013` = ifelse(
`Stat` == "se", paste("(", `2001—2013`, ")", sep=""), as.character(`2001—2013`)
),
Outcome = ifelse(
`Stat` == "se", "", Outcome
)
) %>%
select(-c(Stat))
View(tab_est)
stargazer(tab_est, summary = F)
stargazer(tab_est, summary = F, rownames = F)
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Natural Disasters and Giving: Book Chapter -----------------------------------
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
# Contributor(s): Brenna Jungers, Evan Perry, Drew Westberg
# Last Revised: 2023-04-02
#
# Purpose: The purpose of this script is to clean, organize, and summarize key
# data related to the impact of natural disasters on local charitable giving.
# Primary goals include: (1) basic data cleaning on nonprofit data, (2)
# summarizing and visualizing the data, and (3) running the econometric analysis
# on the data.
#
#
# Input files:
#
# nccs.csv : Consolidated data from NCCS. Raw data from NCCS is too large to
#     upload to GitHub, so this is the consolidated data.
#
# 2020_Planning_Data.csv : County-level census data from the 2010 decennial
#     Census and the 2014 American Community Survey. Use selected variables for
#     perspective on demographic makeup of counties.
#
# co-est2009-alldata.csv : County-level annual population estimates from 2000 -
#     2009.
#
# co-est2019-alldata.csv : County-level annual population estimates from 2010 -
#     2019.
#
# sf12010countydistance500miles.csv : This file contains the distances of every
#     pair of counties that are within 500 miles of each other.
#
# FEMA_Disasters.csv : All disaster declaration records at the county level from
#     FEMA.
#
# hurricanes.csv : A hand-cleaned file that lists the disaster numbers for all
#     relevant hurricanes.
#
#
# Output files:
#
# cleaned_data.csv : Cleaned data incorporating the data listed above. This
#     is panel data with each observation representing a county-year.
#
# summary_stats.tex : Descriptive statistics table.
#
# All the LaTeX tables in the Results/Regression Tables subdirectory.
# All the figures in the Results/Figures subdirectory.
# All the figures in the Results/Robustness Checks subdirectory.
#
# Outline: (Crtl + Shift + O in RStudio)
#   1. Code to Change When Replicating
#   2. Importing Packages and Setup
#   3. Reading and Processing Data
#   4. Data Summary & Visualization
#   5. Analysis
#   6. Placebo Tests
#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
## Code to Change When Replicating ---------------------------------------------
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Set your working directory
#setwd("C:/Users/eaper/CoeRA/IkeChapter") #not needed - tied to Rproj.
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
## Importing Packages and Setup ------------------------------------------------
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Basic data manipulation and importing
library(tidyverse)
library(lubridate)
library(arrow)
library(fastDummies)
library(callr)
# Spatial
library(sf)
library(tidycensus)
library(tmap)
library(tmaptools)
# Estimation
library(estimatr)
library(plm)
# Aesthetics
library(stargazer)
library(ggpubr)
library(NatParksPalettes)
options(scipen = 9)    # Get rid of scientific notation
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Section 1: Data Cleaning -----------------------------------------------------
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Data prep
source("Code/01_clean_nccs.R")
source("Code/02_clean_census.R")
source("Code/03_clean_hurricane.R")
source("Code/04_merge_all.R")
# Summary Statistics & Visualizations
source("Code/05_summary_figs.R")
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Natural Disasters and Giving: Book Chapter -----------------------------------
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
# Contributor(s): Brenna Jungers, Evan Perry, Drew Westberg
# Last Revised: 2023-04-02
#
# Purpose: The purpose of this script is to clean, organize, and summarize key
# data related to the impact of natural disasters on local charitable giving.
# Primary goals include: (1) basic data cleaning on nonprofit data, (2)
# summarizing and visualizing the data, and (3) running the econometric analysis
# on the data.
#
#
# Input files:
#
# nccs.csv : Consolidated data from NCCS. Raw data from NCCS is too large to
#     upload to GitHub, so this is the consolidated data.
#
# 2020_Planning_Data.csv : County-level census data from the 2010 decennial
#     Census and the 2014 American Community Survey. Use selected variables for
#     perspective on demographic makeup of counties.
#
# co-est2009-alldata.csv : County-level annual population estimates from 2000 -
#     2009.
#
# co-est2019-alldata.csv : County-level annual population estimates from 2010 -
#     2019.
#
# sf12010countydistance500miles.csv : This file contains the distances of every
#     pair of counties that are within 500 miles of each other.
#
# FEMA_Disasters.csv : All disaster declaration records at the county level from
#     FEMA.
#
# hurricanes.csv : A hand-cleaned file that lists the disaster numbers for all
#     relevant hurricanes.
#
#
# Output files:
#
# cleaned_data.csv : Cleaned data incorporating the data listed above. This
#     is panel data with each observation representing a county-year.
#
# summary_stats.tex : Descriptive statistics table.
#
# All the LaTeX tables in the Results/Regression Tables subdirectory.
# All the figures in the Results/Figures subdirectory.
# All the figures in the Results/Robustness Checks subdirectory.
#
# Outline: (Crtl + Shift + O in RStudio)
#   1. Code to Change When Replicating
#   2. Importing Packages and Setup
#   3. Reading and Processing Data
#   4. Data Summary & Visualization
#   5. Analysis
#   6. Placebo Tests
#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
## Code to Change When Replicating ---------------------------------------------
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Set your working directory
#setwd("C:/Users/eaper/CoeRA/IkeChapter") #not needed - tied to Rproj.
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
## Importing Packages and Setup ------------------------------------------------
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Basic data manipulation and importing
library(tidyverse)
library(lubridate)
library(arrow)
library(fastDummies)
library(callr)
# Spatial
library(sf)
library(tidycensus)
library(tmap)
library(tmaptools)
# Estimation
library(estimatr)
library(plm)
# Aesthetics
library(stargazer)
library(ggpubr)
library(NatParksPalettes)
options(scipen = 9)    # Get rid of scientific notation
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Section 1: Data Cleaning -----------------------------------------------------
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Data prep
source("Code/01_clean_nccs.R")
source("Code/02_clean_census.R")
source("Code/03_clean_hurricane.R")
source("Code/04_merge_all.R")
# Summary Statistics & Visualizations
source("Code/05_summary_figs.R")
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Section 2: Analysis ----------------------------------------------------------
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
source("Code/06_new_regressions.R")
source("Code/07_panel_balance.R")
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
